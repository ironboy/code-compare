import 'prismjs';
import 'prismjs/plugins/line-numbers/prism-line-numbers';
import 'prismjs/components/prism-java';
import 'prismjs/components/prism-csharp';
import 'prismjs/components/prism-python';
import 'prismjs/themes/prism-okaidia.css';
import 'prismjs/plugins/line-numbers/prism-line-numbers.css';
import { marked } from 'marked';
import $ from 'jquery';

window.Prism = window.Prism || {};
window.Prism.manual = true;

let doNotResetMeta;

let meta = {
  'Java vs. C# - BMI-calc, console app': [
    'BMI-calc, Java, console app',
    'BMI-calc, C#, console app',
    `**Java** (1994) och **C#** (2000) √§r i grunden mycket snarlika. De √§r b√•da h√•rt typade kompilerade spr√•k och har klassbaserad OOP som gemensam utg√•ngspunkt.\n\nMicrosoft designade **C#** som ett direkt svar p√•, och f√∂r att konkurrera med, **Java**. D√• de hade n√•got att j√§mf√∂ra med blev vissa saker lite b√§ttre/mindre verbosa.\n\n*Notera:* I **C#** inleder man, till skillnad fr√•n i **Java**, namn p√• metoder med stor bokstav.\n\n*De h√§r spr√•ken ger en s√§ker, men lite stel, kostym f√∂r hur man b√∂r koda.* üëî`
  ],
  'Java vs. JavaScript - BMI-calc, console app': [
    'BMI-calc, Java, console app',
    'BMI-calc, JavaScript, long/OOP, console app',
    '**Java** (Sun, 1994) och **JavaScript** (Netscape, 1994) √§r ganska olika spr√•k - trots det gemensamma "*Java*" i namnet som kommer fr√•n att *Sun* och *Netscape* hade ett aff√§rssamarbete och t√§nkte att det skulle vara smart att marknadsf√∂ra **JavaScript** som lillebror till **Java**.\n\n**JavaScript** √§r ett l√∂st typat spr√•k och hade ursprungligen ingen klassyntax.\n\nSedan l√§nge (2015) finns dock klasser p√• plats i spr√•ket och vill man kan man skriva det v√§ldigt traditionellt och Java-likt, minus datatypsdeklarationer, vilket vi har gjort h√§r.\n\n*Notera*: I JavaScript heter konstruktorn alltid *constructor* oavsett klassnamn och **this** √§r obligatoriskt f√∂r att n√• klassmedlemmar (f√§lt och metoder). ‚òï'
  ],
  'JavaScript vs. Python - BMI-calc, console app (long/OOP)': [
    'BMI-calc, JavaScript, long/OOP, console app',
    'BMI-calc, Python, long/OOP, console app',
    '**JavaScript** (1994) och **Python** (1991) √§r b√•da l√∂st typade spr√•k som kan skrivas klassbaserat, om man vill. H√§r g√∂r vi det, fast det blir n√•got l√§ngre kod √§n om vi skulle strunta i klasserna.\n\nMedan **JavaScript** har en grundsyntax med curly-brackets/m√•svingar f√∂r programblock, semi-kolon f√∂r radavslut (optional/om man vill) osv. som liknar **Java** och **C#**, v√§ljer **Python** att ist√§llet anv√§nda indrag f√∂r att skilja programblock √•t.\n\n**Notera:**\n* I **JavaScript** anv√§nder vi *this.methodName* f√∂r att referera till metoder i klassen. I **Python** anv√§nder vi ist√§llet *self.methodName*.\n* I **Python** m√•ste vi l√•ta alla metoder i klassen ta emot *self* som ett argument, men utel√§mnar detta argument n√§r vi anropar dem.\n* Konstruktorn i en klass heter *constructor* i **JavaScript** och <span class="init-in-py">*__init__*</span> i **Python**\n* I **Python** skriver vi *inte* **new** framf√∂r klassnamnet n√§r vi skapar en ny instans av klassen.\n* I **Python** f√∂redrar man snake-casing, dvs. underscores, f√∂r att skilja ord i variabel-, metod- och funktionsnamn √•t. I m√•nga andra spr√•k(som **Java**, **C#** och **JavaScript**) √§r *camelCasing* standard. üê´'
  ],
  'JavaScript vs. Python - BMI-calc, console app (short)': [
    'BMI-calc, JavaScript, short, console app',
    'BMI-calc, Python, short, console app',
    '**JavaScript** (1994) och **Python** (1991) √§r b√•da l√∂st typade spr√•k och har gemensamt att de √§r l√§tt att "leka" med datatyper i dem, och de kr√§ver minimial syntax f√∂r att skapa listor, hashmaps etc.\n\nMedan **JavaScript** har en grundsyntax med curly-brackets/m√•svingar f√∂r programblock, semi-kolon f√∂r radavslut osv. som liknar **Java** och **C#**, v√§ljer **Python** att ist√§llet anv√§nda indrag f√∂r att skilja programblock √•t.\n\nSpr√•ken kan b√•da anv√§ndas s√•v√§l med som utan klasser - h√§r ett exempel utan klasser i b√§gge spr√•ken, vilket ger kortare och mer kompakt kod.\n\n(**Python** har p√• gott och ont lite st√∂rre behov av typomvandlingar √§n JavaScript.)\n\n*Ingen finkostym beh√∂vs, fullt √∂s!* üéâ'
  ],
  'JavaScript vs. Python - BMI-calc med GUI/grafiskt gr√§nssnitt': [
    'BMI-calc, JavaScript, GUI',
    'BMI-calc, Python, GUI',
    '**JavaScript** √§r ursprungligen designat f√∂r att k√∂ra i webbl√§sare och komplettera **HTML** (ett m√§rkspr√•k f√∂r inneh√•ll) och **CSS** (ett regelbaserat spr√•k f√∂r styling av element p√• webbsidor). S√•ledes √§r det naturligt att grafiska gr√§nssnitt f√∂r JavaScript-program skapas med **HTML** och **CSS**.\n\n**Python** har **TKinter** som sitt standardverktyg f√∂r grafiska gr√§nssnitt. Det √§r ett bibliotek byggt ovanp√• **TK** (ett open-source plattformsoberoende verktyg) som √§r **widget**-baserat, dvs. det finns olika slags grafiska element (*widgets*) - som *labels/text*, *input-f√§lt* m.m. att v√§lja mellan f√∂r att bygga sitt GUI.\n\nDetta g√∂r att angreppss√§ttet f√∂r att bygga grafiska gr√§nssnitt √§r ganska olika mellan spr√•ken. Trots det g√•r det att skapa ett exempel, som det h√§r, d√§r koden √§r j√§mf√∂rbar i struktur och l√§ngd.\n\n*4 kilobyte kod x 2 borde vara nog f√∂r alla?* üòõ'
  ]
}

let codeExamples = {
  'BMI-calc, Java, console app': '/examples/Main.java',
  'BMI-calc, C#, console app': '/examples/c-sharp/Program.cs',
  'BMI-calc, JavaScript, long/OOP, console app': '/examples/bmi-long.cjs',
  'BMI-calc, JavaScript, long/OOP, no semi-colons, console app': '/examples/bmi-long-no-semis.cjs',
  'BMI-calc, Python, long/OOP, console app': '/examples/bmi-long.py',
  'BMI-calc, JavaScript, short, console app': '/examples/bmi-short.cjs',
  'BMI-calc, JavaScript, short, no semi-colons, console app': '/examples/bmi-short-no-semis.cjs',
  'BMI-calc, Python, short, console app': '/examples/bmi-short.py',
  'BMI-calc, JavaScript, GUI': '/examples/bmi-with-gui-js/app.js',
  'BMI-calc, JavaScript, GUI, window-handling.js': '/examples/bmi-with-gui-js/window-handling.js',
  'BMI-calc, JavaScript, GUI, index.html (start)': '/examples/bmi-with-gui-js/index.html',
  'BMI-calc, JavaScript, GUI, style.css': '/examples/bmi-with-gui-js/style.css',
  'BMI-calc, Python, GUI': '/examples/bmi-with-gui-python/main.py',
  'BMI-calc, Python, GUI, window_handling.py': '/examples/bmi-with-gui-python/window_handling.py',
  'BMI-calc, Python, GUI, style.py': '/examples/bmi-with-gui-python/style.py',
}

let originalCodeExamples = Object.assign({}, codeExamples);

let playCodeExamples = [
  'https://replit.com/@ThomasFrank4/Java-BMI-calc#Main.java',
  'https://replit.com/@ThomasFrank4/C-BMI-calc#main.cs',
  'https://replit.com/@ThomasFrank4/JS-BMI-calc-longOOP#index.js',
  'hhttps://replit.com/@ThomasFrank4/JS-BMI-calc-longOOP-no-semis#index.js',
  'https://replit.com/@ThomasFrank4/Python-BMI-calc-longOOP#main.py',
  'https://replit.com/@ThomasFrank4/JS-BMI-calc-short#index.js',
  'https://replit.com/@ThomasFrank4/JS-BMI-calc-short-no-semis#index.js',
  'https://replit.com/@ThomasFrank4/Python-BMI-calc-short#main.py',
  'https://replit.com/@ThomasFrank4/BMI-calc-JavaScript-GUI#app.js',
  'https://replit.com/@ThomasFrank4/BMI-calc-JavaScript-GUI#window-handling.js',
  'https://replit.com/@ThomasFrank4/BMI-calc-JavaScript-GUI#index.html',
  'https://replit.com/@ThomasFrank4/BMI-calc-JavaScript-GUI#style.css',
  'https://replit.com/@ThomasFrank4/Python-BMI-calc-GUI#main.py',
  'https://replit.com/@ThomasFrank4/Python-BMI-calc-GUI#window_handling.py',
  'https://replit.com/@ThomasFrank4/Python-BMI-calc-GUI#style.py'
]

let highlite = (code, lang) => {
  lang = lang === 'cs' ? 'csharp' : lang;
  lang = lang === 'cjs' ? 'js' : lang;
  let c = Prism.highlight(code, Prism.languages[lang], lang);
  if (c.split('\n').length > 2) {
    c = '<ol><li><div>' + c.replace(/\n */g, x => `</div></li><li style="padding-left:${x.slice(1).length * 9}px"><div><span class="cspaces">${x.slice(1) || ' '}</span>`) + '</div></li></ol>';
  }
  return c;
}

async function start() {
  $('body').append('<div class="holder"></div><div class="examples">');
  for (let [key, val] of Object.entries(codeExamples)) {
    let lang = val.split('.').pop();
    let code = await $.get({ url: val, dataType: 'text' });
    codeExamples[key] = { code };
    let bytes = new Intl.NumberFormat('sv-SE').format(code.length)
    codeExamples[key].html = /*html*/`
      <div class="example" data-name="${key}">
        <h3>${key}</h3>
        <p class="info"><span class="lines">Lines of code: ${code.split('\n').length}</span><span class="bytes">Bytes: ${bytes}</span></p>
        <div class="play-holder"><img class="play" src="/play-button.png"></div>
        <code>${highlite(code, lang)}</code>
      </div>
    `;
  }
  for (let code of Object.values(codeExamples)) {
    $('.examples').append(code.html);
  }
  $('body').on('click', '.play', function () {
    let n = $(this).closest('.example, .inner-example').attr('data-name');
    let i = Object.keys(originalCodeExamples).indexOf(n);
    let link = playCodeExamples[i];
    open(link, "");
  });
  hackMultiExample();
  addChooser(1);
  addChooser(0);
  addCompareChooser();
  fixForHTMLHighlitingInJSCode();
}

function addChooser(chosen) {
  let chooser = $(`
    <div class="chooser">
      <select>
      ${Object.keys(codeExamples).map((x, i) => `<option ${i == chosen ? ' selected' : ''}>${x}</option>`).join('')}
      </select>
    </div>
  `);
  chooser.prependTo('.examples');
  chooser.find('select').on('change', () => {
    $('.example').hide();
    let values = [...$('.chooser select')].map(x => $(x).val());
    for (let value of values) {
      let el = $('.example[data-name="' + value + '"]')
      el.show();
    }
    let el = $('.example[data-name="' + values[0] + '"]');
    el.prependTo('.examples');
    $('.examples').prepend($('.chooser'));
    if (chosen === 0) {
      $('.chooser').last().find('option').each(function () {
        $(this).prop('disabled', $(this).text() === values[0]);
      });
    }
    if (chosen === 1) {
      $('.chooser').first().find('option').each(function () {
        $(this).prop('disabled', $(this).text() === values[1]);
      });
    }
    !doNotResetMeta && $('.meta').val('V√§lj j√§mf√∂relse').trigger('change');
  });
  chooser.find('select').trigger('change');
}

function addCompareChooser() {
  let select = '<select class="meta">';
  select += '<option>V√§lj j√§mf√∂relse</option>';
  let first = true;
  for (let key in meta) {
    select += `<option ${first ? ' selected' : ''}>${key}</option>`
    first = false;
  }
  select += '</select>';
  select = $(select);
  $('.holder').append('<div class="headit"></div>');
  $('.holder .headit').append('<h1>ironboys spr√•kj√§mf√∂relser</h1 > ');
  $('.holder .headit').append('<div class="explain intro"><i>Denna utg√•va: En BMI-kalkylator i Java, C#, JavaScript och Python...</i></div>');
  $('.holder .headit').append('<div class="intro">Klicka p√• Play-knapparna f√∂r att k√∂ra ett stycke kod!</div>');
  $('.holder').append(select);
  $('.holder').append('<div class="desc"></div>');
  select.on('change', () => {
    let selected = meta[select.val()];
    if (!selected) {
      $('.holder .desc').html(marked.parse(''));
      return;
    }
    let [choice1, choice2, desc] = selected;
    doNotResetMeta = true;
    $('option').each(function () { $(this).prop('disabled', false) });
    $('.chooser select').first().val(choice1).trigger('change');
    $('.chooser select').last().val(choice2).trigger('change');
    $('.holder .desc').html(marked.parse(desc));
    $('.init-in-py em').html('__init__');
    doNotResetMeta = false;
  });
  select.trigger('change');
}

function hackMultiExample() {
  let toRemove = [];
  let html = '';
  for (let i = 0; i <= 1; i++) {
    let consume = $('.example').last();
    consume.removeClass('example').addClass('inner-example');
    html = consume.get(0).outerHTML + html;
    toRemove.push(consume.attr('data-name'));
    consume.remove();
  }
  $('.example').last().append(html).prependTo('.examples');
  html = '';
  for (let i = 0; i <= 2; i++) {
    let consume = $('.example').last();
    consume.removeClass('example').addClass('inner-example');
    html = consume.get(0).outerHTML + html;
    toRemove.push(consume.attr('data-name'));
    consume.remove();
  }
  $('.example').last().append(html);
  for (let remove of toRemove) {
    delete codeExamples[remove];
  }

  let y1el = $('[data-name="BMI-calc, Python, GUI"]');
  let y2el = $('[data-name="BMI-calc, JavaScript, GUI"]');
  y1el.show();
  y2el.show();
  let y1 = y1el.find('h3').last().offset().top;
  let y2 = y2el.find('h3').last().offset().top;

  y2el.prepend('<h2>BMI-calc, JavaScript, GUI</h2>');
  y2el.find('h3').first().append(', app.js: Huvudprogram');
  y1el.prepend('<h2>BMI-calc, Python, GUI</h2>');
  y1el.find('h3').first().append(', main.py: Huvudprogram');
  y1el.find('h3').add(y2el.find('h3')).each(function () {
    $(this).html($(this).html().split(', ').pop());
  })
  let diff = y2 - y1 - 10;

  let fixer = x => +$(x).html().split('&nbsp;').join('').split(':').pop();
  let tLinesPy = [...y1el.find('.lines')].map(fixer).reduce((a, b) => a + b);
  let tBytesPy = [...y1el.find('.bytes')].map(fixer).reduce((a, b) => a + b);
  let tLinesJs = [...y2el.find('.lines')].map(fixer).reduce((a, b) => a + b);
  let tBytesJs = [...y2el.find('.bytes')].map(fixer).reduce((a, b) => a + b);
  tBytesJs = new Intl.NumberFormat('sv-SE').format(tBytesJs);
  tBytesPy = new Intl.NumberFormat('sv-SE').format(tBytesPy);
  y1el.find('h2').after(`<p class="info"><span class="lines">Lines of code: ${tLinesPy}</span><span class="bytes">Bytes: ${tBytesPy}</span></p><div class="line"></div>`);
  y2el.find('h2').after(`<p class="info"><span class="lines">Lines of code: ${tLinesJs}</span><span class="bytes">Bytes: ${tBytesJs}</span></p><div class="line"></div>`);

  $('[data-name="BMI-calc, Python, GUI"]').find('h3').last().before(
    /*html*/`<div class="explain" style="height:${diff}px">
      ${marked.parse('*Pythons* **window handling** √§r aningen l√§ngre √§n *JavaScripts*, d√• *Python* beh√∂ver en funktion f√∂r att starta en s.k. *Tkinter event loop* och visa f√∂nstret. H√§r √§r koden dessutom versionerad beroende p√• operativsystem. √Ö andra sidan beh√∂ver **Python** ingen *html*-fil f√∂r att starta upp, vilket **JavaScript** i en webbl√§sare allltid beh√∂ver.')}
    </div>`
  );

  y1el.append('<br><h3>Resultat</h3><br><a class="img-link" target="_blank" href="https://replit.com/@ThomasFrank4/Python-BMI-calc-GUI#main.py"><img src="/bmi-gui-python.jpg" style="width:40vw;display:inline-block"></a>');
  y2el.append('<br><h3>Resultat</h3><br><a class="img-link" target="_blank" href="https://replit.com/@ThomasFrank4/BMI-calc-JavaScript-GUI#index.html"><img src="/bmi-gui-js.jpg" style="width:40vw;display:inline-block"></a>');

  y1el.hide();
  y2el.hide();
}

function fixForHTMLHighlitingInJSCode(){
  let snippet = `  <img style="margin-top:15px" src="\${health_icon_image}">
  <h3>BMI-kalkylatorn</h3>
  <label>Din l√§ngd i cm:
    <input class="cm" type="number">
  </label>
  <label>Din vikt i kg:
    <input class="kg" type="number">
  </label>
  <button class="calculate">
    R√§kna ut din BMI</button>
  <h4 class="result"></h4>
  <h4 class="assess"></h4>`;
  snippet = $(highlite(snippet, 'html')).html();
  let a = $('li:contains("${health_icon")');
  a.before(snippet);
  while (a) {
    let next = a.next();
    a.remove();
    a = next;
    if (a.html().includes('assess')) { a.remove();  a = null;  }
  }
}


start();